?load
load("mtcars")
data(mtcars)
names(mtcars)
attach(mtcars)
mpg
table(cyl)
barplot(table(cyl))
stem(mpg)
hist(mpg)
boxplot(mpg)
summary(mpg)
sd(mpg)
IQR(mpg)
mpg[cyl == 4]
mean(mpg[cyl == 4])
plot(cyl, mpg)
tapply(mpg, cyl, mean)
install.packages(Simple)
library("Simple")
load.packages("Simple")
install.packages("Simple")
cor(hp,mpg)
cor(cyl, mpg)
cor(cyl, mpg)^2
cor(hp,mpg)^2
plot(hp, mpg, pch=cyl)
detach()
q()
version
n = 100
g = 6
set.seed(g)
d <- data.frame(x = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))), y = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))) )
plot(d)
mydata <- d
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
clusters <- kmeans(d, centers = 4, iter.max = 10, nstart = 100)
?twListToDF
str(d)
data <- union(d$x, d$y)
data$cluster <- factor(clusters$cluster)
data <- as.df(data)
class(data)
head(data)
plotcluster(d, clusters$cluster)
library(cluster)
plotcluster(d, clusters$cluster)
library(fpc)
require(rCharts)
str(d)
d$cluster <- factor(clusters$cluster)
str(d)
p2 <- nPlot(x ~ y, group = 'cluster', data = d, type = 'scatterChart')
p2$xAxis(axisLabel = "x")
p2$yAxis(axisLabel = "y")
p2
options(viewer = NULL)
p2
rstudio::viewer(p2)
h1 <- hPlot(x="wt",y="mpg",group="cyl",data=mtcars,type="scatter")
h1
getOption("viewer")
options(viewer = 1)
h1 <- hPlot(x="wt",y="mpg",group="cyl",data=mtcars,type="scatter")
h1
getOption("viewer")
getOption("viewer", default=browseURL)
options(viewer = browseURL)
getOption("viewer")
h1 <- hPlot(x="wt",y="mpg",group="cyl",data=mtcars,type="scatter")
h1
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(diagnosis)
head(diagnosis)
str(predictors)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
testIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
head(training)
head(testing)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
x = (1:10)
x
y = [1:10:100]
y = seq(from=1, to=100, by = 10)
plot(x,y)
plot(mixtures$CompressiveStrength)
library(Hmisc)
str(mixtures$CompressiveStrength)
head(mixtures$CompressiveStrength)
str(mixtures)
str(training)
plot(training$CompressiveStrength)
qplot(Age, CompressiveStrength, data=training)
qplot(FlyAsh, CompressiveStrength, data=training)
plot(training$CompressiveStrength)
qplot(Cement, CompressiveStrength, data=training)
qplot(Water, CompressiveStrength, data=training)
qplot(Superplasticizer, CompressiveStrength, data=training)
qplot(CoarseAggregate, CompressiveStrength, data=training)
qplot(FineAggregate, CompressiveStrength, data=training)
qplot(CompressiveStrength, CompressiveStrength, data=training)
qplot(BlastFurnacesLag, CompressiveStrength, data=training)
qplot(BlastFurnaceSlag, CompressiveStrength, data=training)
hist(training$SuperPlasticizer)
names <- colnames(concrete)
names
names <- names[-length(names)]
names
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
plot(training$compressiveStrength)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x=index, y = CompressiveStregnth)) + geom_point() + theme_bw()
ggplot(data = training, aes(x=index, y = CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y=index, x = cutCS)) + geom_boxplot() + geom_jitter(col="blue") + theme_bw()
featurePlot(x=training[,names], y = cutCS, plot = "box")
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = SuperPlasticizer)) + geom_histogram() + theme_bw()
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain,]
testing = df[-inTrain,]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
modelFit <- train(training$diagnosis ~ ., method = "glm", preferences = "pca", data = training, trControl = trainControl(preProcOptions = list(thresh = 0.9)))
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training, trControl = trainControl(preProcOptions = list(thresh = 0.9)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
setenv("C:\Itera\Coursera\07 Regression Models\Project")
setenv("C:/Itera/Coursera/07 Regression Models/Project")
setwd("C:/Itera/Coursera/07 Regression Models/Project")
setwd("C:/Itera/Coursera/09 Developing Data Projects/")
setwd("C:/Itera/Coursera/09 Developing Data Projects")
setwd("C:/Itera/Coursera/09 Developing Data Products")
shiny::runApp()
library(slidify)
setwd("C:/Itera/Coursera/slidify")
author("Kmean_Explorer")
slidify(index.Rmd)
slidify('index.Rmd')
publish(user = "abbhakan", repo = "https://github.com/abbhakan/KmeansExplorer.git")
publish(user = "abbhakan", repo = "git@github.com:abbhakan/KmeansExplorer.git")
